import { Stack, TextField, Typography } from '@mui/material';
import { ReactNode, SetStateAction, useEffect, useState } from 'react';
import { useCreateStocking } from '@/feature/arrival/hooks/useCreateStocking';
import { PATH } from '@/constants/paths';
import { useRouter } from 'next/navigation';
import dayjs from 'dayjs';
import { calcArrivalPricesByCommonProduct } from '@/feature/arrival/utils';
import { SupplierSelect } from '@/feature/arrival/components/SupplierSelect';
import { CommonCard } from '@/components/cards/CustomCard';
import { useStore } from '@/contexts/StoreContext';
import { CaptionToolTip } from '@/components/tooltips/CaptionToolTip';
import { useAlert } from '@/contexts/AlertContext';
import { BackendStockingAPI } from '@/app/api/store/[store_id]/stocking/api';
import { useUpsertStocking } from '@/feature/arrival/hooks/useUpsertStocking';
import { CustomArrivalProductSearchType } from '@/app/auth/(dashboard)/arrival/register/page';
import { useCreateProduct } from '@/feature/products/hooks/useCreateProduct';
import { useUpdateProduct } from '@/feature/products/hooks/useUpdateProduct';
import { ApiError } from 'api-generator/client';
import { useSaveLocalStorageRegister } from '@/app/auth/(dashboard)/arrival/register/hooks/useSaveLocalStorageRegister';

interface Props {
  products: CustomArrivalProductSearchType[];
  setProducts: React.Dispatch<SetStateAction<CustomArrivalProductSearchType[]>>;
  isTaxIncluded: boolean;
  selectedStocking: BackendStockingAPI[5]['response']['200'][number] | null;
  idParam: string;
}
export const ArrivalSetting = ({
  products,
  setProducts,
  isTaxIncluded,
  selectedStocking,
  idParam,
}: Props) => {
  const { isLoading, createStocking } = useCreateStocking();
  const { upsertStocking, isLoading: isUpsertLoading } = useUpsertStocking();
  const { createProduct, isLoading: isCreateLoading } = useCreateProduct();
  const { updateProduct, isLoadingUpdateProduct } = useUpdateProduct();

  const { store } = useStore();
  const { push } = useRouter();
  const { setAlertState } = useAlert();
  const [supplierID, setSupplierID] = useState<number | null>(null);
  // 仕入れ日
  const [date, setDate] = useState<string>(dayjs().format('YYYY-MM-DD'));
  const {
    totalArrivalPrice,
    totalArrivalPriceWithoutTax,
    tax,
    expectedSales,
    totalProfit,
  } = calcArrivalPricesByCommonProduct(products, isTaxIncluded, store.tax_mode);
  const { removeLocalStorageItemById } = useSaveLocalStorageRegister();

  // 仕入れを作成
  const handleCreateArrival = async () => {
    if (!supplierID) {
      setAlertState({
        message: '仕入れ先が設定されていません',
        severity: 'error',
      });
      return;
    }
    if (!date) {
      setAlertState({
        message: '入荷予定日が設定されていません',
        severity: 'error',
      });
      return;
    }

    //productIdがnullの場合管理番号が入力されているかつ新規で作られているもののため作成する
    const productsWithAutoGeneratedManagementNumber = await Promise.all(
      products.map(async (p) => {
        let registerProduct = { ...p };

        if (!p.id) {
          const createOption = {
            condition_option_id: registerProduct.condition_option_id || -1,
            specialty_id: registerProduct.specialty_id || undefined,
            management_number: registerProduct.management_number || '',
          };
          if (createOption.condition_option_id === -1)
            return setAlertState({
              message: '状態IDが登録入力されていません',
              severity: 'error',
            });

          const createResponse = await createProduct({
            storeId: store.id,
            itemId: registerProduct.item_id,
            requestBody: createOption,
          });

          if (createResponse instanceof ApiError) {
            setAlertState({
              message: '商品の作成に失敗しました',
              severity: 'error',
            });
            return;
          }

          registerProduct = { ...registerProduct, id: createResponse.id };
          return registerProduct;
        } else {
          return registerProduct;
        }
      }),
    );

    const filteredProducts = productsWithAutoGeneratedManagementNumber.filter(
      (p): p is CustomArrivalProductSearchType => !!p,
    );

    setProducts(filteredProducts);

    // 仕入れ情報が存在する場合は更新
    if (selectedStocking) {
      const stockingID = selectedStocking.id;
      if (products.length === 0) {
        setAlertState({
          message: '仕入れ商品が存在しません',
          severity: 'error',
        });
        return;
      }
      try {
        //管理番号を更新
        await Promise.all(
          filteredProducts.map(async (product) => {
            if (!product.management_number) return;
            await updateProduct(store.id, product.id, {
              managementNumber: product.management_number,
            });
          }),
        );

        await upsertStocking({
          stockingID,
          supplierID,
          plannedDate: date,
          stockingProducts: filteredProducts,
          isTaxIncluded,
        });
        push(PATH.ARRIVAL.root);
      } catch (error) {
        console.error(error);
        setAlertState({
          message: '仕入れの更新に失敗しました',
          severity: 'error',
        });
      }
    } else {
      try {
        await createStocking({
          plannedDate: date,
          supplierID,
          products: filteredProducts,
          isTaxIncluded,
        });
        // localStorageから商品情報を削除
        const taxType = isTaxIncluded ? 'include' : 'exclude';
        const registerId = idParam ? Number(idParam) : -1;
        removeLocalStorageItemById(registerId, taxType);
        push(PATH.ARRIVAL.root);
      } catch (error) {
        console.error(error);
        setAlertState({
          message: '仕入れの作成に失敗しました',
          severity: 'error',
        });
      }
    }
  };

  // 仕入れ情報が存在する場合は初期値をset
  useEffect(() => {
    if (selectedStocking) {
      setSupplierID(selectedStocking.supplier_id);
      setDate(dayjs(selectedStocking.planned_date).format('YYYY-MM-DD'));
    }
  }, [selectedStocking]);

  return (
    <Stack height="100%">
      <CommonCard
        title="発注詳細"
        rightButtonText="発注確定"
        height="100%"
        width="100%"
        onRightButtonClick={handleCreateArrival}
        loading={
          isLoading ||
          isUpsertLoading ||
          isLoadingUpdateProduct ||
          isCreateLoading
        }
      >
        <Stack flexDirection="column" width="100%" gap={2}>
          <SpacingFormItem
            title="仕入れ先"
            node={
              <SupplierSelect
                supplierID={supplierID}
                setSupplierID={setSupplierID}
              />
            }
          />
          <SpacingFormItem
            title="入荷店舗"
            message="サイドメニュー「設定＞仕入れ先」内で登録した仕入れ先から選択してください。"
            node={<Data title="" data={store.display_name ?? ''} />}
          />
          <SpacingFormItem
            title="入荷予定日"
            node={
              <>
                <TextField
                  name="date"
                  type="date"
                  size="small"
                  value={date}
                  onChange={(e) => setDate(e.target.value)}
                  sx={{ width: '70%' }}
                  InputLabelProps={{
                    shrink: true,
                    sx: {
                      color: 'text.primary',
                    },
                  }}
                />
              </>
            }
          />
          <Stack
            width="100%"
            flexDirection="column"
            alignItems="flex-end"
            gap={1}
          >
            <PriceDisplayItem
              title={'仕入れ合計(税込み)'}
              price={totalArrivalPrice}
            />
            <Stack width="80%">
              <PriceDisplayItem
                title={'仕入れ合計(税抜き)'}
                price={totalArrivalPriceWithoutTax}
                variant="caption"
              />
              <PriceDisplayItem
                title={'消費税'}
                price={tax}
                variant="caption"
              />
            </Stack>
            <PriceDisplayItem title={'見込み売上'} price={expectedSales} />
            <PriceDisplayItem title={'見込み利益'} price={totalProfit} />
          </Stack>
        </Stack>
      </CommonCard>
    </Stack>
  );
};

interface SpacingFormItemProps {
  title: string;
  node: ReactNode;
  variant?: 'body1' | 'caption';
  message?: string;
}
const SpacingFormItem = ({
  title,
  node,
  variant = 'body1',
  message,
}: SpacingFormItemProps) => {
  return (
    <Stack
      direction="row"
      alignItems="center"
      justifyContent="space-between"
      width="100%"
    >
      <Typography width="100px" variant={variant}>
        {title}
        {message && <CaptionToolTip message={message} />}
      </Typography>
      {node}
    </Stack>
  );
};

interface DataProps {
  title: string;
  data: string;
}
const Data = ({ title, data }: DataProps) => {
  return (
    <Stack direction="row" alignItems="center">
      {title.trim() !== '' && (
        <Typography width="100px" variant="body1">
          {title}
        </Typography>
      )}
      <Typography variant="body1" sx={{ width: '100%' }}>
        {data}
      </Typography>
    </Stack>
  );
};

interface PriceDisplayItemProps {
  title: string;
  price: number | null | undefined;
  variant?: 'body1' | 'caption';
}

const PriceDisplayItem = ({
  title,
  price,
  variant = 'body1',
}: PriceDisplayItemProps) => {
  return (
    <Stack
      direction="row"
      alignItems="center"
      justifyContent="space-between"
      width="100%"
      sx={{
        borderBottom: '1px solid #ccc',
        paddingY: 1,
      }}
    >
      <Typography variant={variant}>{title}</Typography>

      <Typography variant={variant}>
        {price !== null && price !== undefined
          ? `${price.toLocaleString()}円`
          : '-'}
      </Typography>
    </Stack>
  );
};
