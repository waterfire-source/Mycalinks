

//顧客
model Customer {
  id                Int    @db.UnsignedInt()    @id @default(autoincrement())
  store_id          Int  @db.UnsignedInt()
  store             Store     @relation(fields: [store_id], references: [id], onDelete: Cascade)
  email             String?
  myca_user_id      Int?       //Mycaアプリの会員だったら、ここにMycaアプリユーザーIDを保持しておく
  @@index([myca_user_id])

  birthday          DateTime? @db.Date() //誕生日
  registration_date DateTime? @db.Date() //入会日
  
  address           String? //住所（廃止予定）
  zip_code          String? //郵便番号
  prefecture        String? //県
  city              String? //市区町村
  address2          String? //それ以降の住所
  building          String? //建物名
  full_name         String? //名前
  full_name_ruby    String? //ふりがな
  phone_number      String? //電話番号
  gender            String? //性別
  career            String? //職業
  term_accepted_at  DateTime? //登録時に買取の利用規約に同意した日時

  is_active Boolean @default(true) @db.UnsignedTinyInt() //アクティブ顧客とは、能動的に会員登録を行った顧客（買取受付などで仮登録した人については非アクティブとなる）

  point_exp  DateTime? @db.Date() //ポイント有効期限 この値の日中はポイントが有効
  owned_point       Int       @default(0) //この店における保有ポイント

  created_at DateTime  @default(dbgenerated("CURRENT_TIMESTAMP()")) @db.Timestamp(0)
  updated_at DateTime  @default(dbgenerated("CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP()")) @db.Timestamp(0)

  transactions Transaction[]
  point_histories Customer_Point_History[] //この顧客のポイント履歴
  reservation_receptions Reservation_Reception[] //この顧客の予約受付
  reservation_reception_products Reservation_Reception_Product[] //この顧客の予約受付商品

  memo String? @db.Text() //顧客メモ

  @@unique([store_id, myca_user_id])
}

//ポイント履歴の変動の種類
enum CustomerPointHistorySourceKind {
  TRANSACTION_USE //取引でポイントを使った時（取引以外でポイントを使うことになる可能性もあるため、ネームスペースを入れている）
  TRANSACTION_USE_RETURN //取引を返品した時、使ったポイントも元に戻す
  TRANSACTION_GET //取引の取得ポイント（買取・販売兼用）
  TRANSACTION_GET_RETURN //取引の返品ポイント（買取・販売兼用）
  VISIT //来店ポイント（取得）
  MANUAL //手動ポイント変動
}

//顧客のポイントの移り変わり
model Customer_Point_History {
  id                Int                           @id @default(autoincrement())
  staff_account_id  Int?  @db.UnsignedInt() //担当者
  staff_account     Account?                      @relation(fields: [staff_account_id], references: [id], onDelete: Cascade)
  customer_id Int  @db.UnsignedInt() //変動の対象の顧客ID
  customer Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  source_kind       CustomerPointHistorySourceKind //変動の種類
  source_id         Int?  @db.UnsignedInt() //結び付けられているリソースのID transaction_id 来店ポイントだったら特になしで
  change_price      Int //変動額
  description       String? //備考、変動の理由など
  result_point_amount Int //結果、何ポイントになったのか
  created_at DateTime                      @default(dbgenerated("CURRENT_TIMESTAMP()")) @db.Timestamp(0) //変動の日時として使って大丈夫
}
