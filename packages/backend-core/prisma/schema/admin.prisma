//管理系

//契約ステータス
enum ContractStatus {
  NOT_STARTED //開始前
  STARTED //開始済み（支払い済み 利用開始日になってなくても初期費用を払ったらこのステータスになる）
  ERROR //エラー（支払いができてないなど？）
  FINISHED //終了済み
}

//POS契約
model Contract {
  id           Int   @db.UnsignedInt()   @id @default(autoincrement())
  status ContractStatus @default(NOT_STARTED) //契約ステータス
  token String @unique //トークン
  token_expires_at DateTime @db.Timestamp(0) //トークン有効期限
  start_at DateTime  @db.Timestamp(0) //利用開始日時
  next_payment_at DateTime?  @db.Timestamp(0) //次回決済日時（失敗時などもこれを更新していく） 契約作成時はnull

  email String? //メールアドレス（決済失敗時の連絡用など？） 契約作成時はnull

  main_account_monthly_fee Int //メインアカウント月額利用料
  corporation_management_account_fee Int //本部管理アカウント利用料
  mobile_device_connection_fee Int //スマホ・タブレット連携費用
  initial_fee Int //初期費用

  initial_payment_price Int //初期支払い料 自動計算
  monthly_payment_price Int //月額支払い料 自動計算

  gmo_customer_id String? //GMO上でのメンバーID
  cards Gmo_Credit_Card[] //保存されているカード
  payments Contract_Payment[] //支払い

  corporation_id Int?  @unique  @db.UnsignedInt() //作成できた法人ID
  corporation Corporation? @relation(fields: [corporation_id], references: [id], onDelete: Cascade)

  created_at              DateTime                @default(dbgenerated("CURRENT_TIMESTAMP()")) @db.Timestamp(0)
  updated_at              DateTime                @default(dbgenerated("CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP()")) @db.Timestamp(0)
}

//GMOのクレジットカード情報
model Gmo_Credit_Card {

  id           Int   @db.UnsignedInt()   @id @default(autoincrement())
  customer_id String //顧客IDも一応入れる
  card_id String //カードID
  @@unique([customer_id,card_id])

  masked_card_number String //マスクされたカード番号（下四桁）
  name String //名前
  expire_month String
  expire_year String
  issue_code String //何に使うかはわからん
  brand String //VISAなど
  is_primary   Boolean     @default(true) @db.UnsignedTinyInt() //デフォルトでは最後に登録したやつがprimary

  contract_id  Int?   @db.UnsignedInt()  //POS契約と結びついている時、そのID
  contract Contract? @relation(fields: [contract_id], references: [id], onDelete: Cascade)
  app_user_id  Int?  //アプリユーザー
  app_user App_User? @relation(fields: [app_user_id], references: [app_user_id], onDelete: Cascade)
  contract_payments Contract_Payment[]
  ec_order_payments Ec_Order_Payment[]

  created_at              DateTime                @default(dbgenerated("CURRENT_TIMESTAMP()")) @db.Timestamp(0)
  updated_at              DateTime                @default(dbgenerated("CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP()")) @db.Timestamp(0)

}

//POS契約の支払いだけでテーブルを作成する
enum ContractPaymentStatus {
  PENDING //待機中のステータス
  PAID
  ERROR
}

enum ContractPaymentKind {
  INITIAL_FEE //初期費用
  MONTHLY_FEE //月額費用
  //その他などが出るかもしれない
}
model Contract_Payment {

  id           Int   @db.UnsignedInt()   @id @default(autoincrement()) //これがGMOのorderIdになる
  gmo_access_id String? @unique //GMOのアクセスID
  contract_id  Int   @db.UnsignedInt()  //POS契約と結びついている時、そのID
  contract Contract @relation(fields: [contract_id], references: [id], onDelete: Cascade)
  status ContractPaymentStatus //ステータス
  kind ContractPaymentKind //種類
  target_month Int? //対象の月（月額費用時） 2025年1月だったら202501となる
  card_id    Int   @db.UnsignedInt() //カード
  card Gmo_Credit_Card @relation(fields: [card_id], references: [id], onDelete: Cascade)
  total_price Int //合計金額
  type PaymentMode @default(pay)

  retry_count Int @default(0) //リトライした時に何回目のリトライか入れたい

  created_at              DateTime                @default(dbgenerated("CURRENT_TIMESTAMP()")) @db.Timestamp(0)
  updated_at              DateTime                @default(dbgenerated("CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP()")) @db.Timestamp(0)
  finished_at              DateTime?                //支払い済みになった時

}


enum TaskStatus {
  QUEUED //キューに入れた時
  PROCESSING //処理中
  FINISHED //処理が終わった時
  ERRORED //エラーが起きた時
}

//タスクの情報ソースKIND
enum TaskSourceKind {
  API //CSVファイル経由ではなく、直接ユーザーからのAPIリクエストから処理が始まったもの
  CSV //CSVファイル経由でリクエストされたもの
  SYSTEM //システムからの自動リクエストだが、Task管理したいもの
}

//タスク関連
model Task {
  process_id String @id
  target_worker String
  kind String //処理の種類
  @@index([target_worker, kind])
  md5 String? //md5ハッシュ値（重複タスクを検知するため）
  status TaskStatus @default(QUEUED) //ステータス
  process_description String? //処理の説明
  status_description String? //ステータスの説明
  requested_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP()")) @db.Timestamp(0) //リクエスト時間
  started_at DateTime? @db.Timestamp(0) //開始時間（最初の処理が始まった時間）
  finished_at DateTime? @db.Timestamp(0) //終了時間（最後の処理が終わった時間）
  errored_at DateTime? @db.Timestamp(0) //エラー時間（エラーが起きた時間）
  error_count Int @default(0) //合計エラーの数 これが3になるタイミングでメッセージが削除される
  total_queued_task_count Int //キューに入れたタスクの数（チャンクの数）
  item_count_per_task Int @default(0) //一つのタスクに含まれる処理の数
  total_processed_task_count Int //処理したタスクの数
  source TaskSourceKind @default(API) //タスクのソース
  metadata Json? //タスクのメタデータ 柔軟に持たせる、検索で使わない系のメタデータ

  corporation_id Int? @db.UnsignedInt() //関連づけられた法人ID
  corporation Corporation? @relation(fields: [corporation_id], references: [id], onDelete: Cascade)
  store_id Int? @db.UnsignedInt() //関連づけられた店舗ID
  store Store? @relation(fields: [store_id], references: [id], onDelete: Cascade)

  items Task_Item[]

  created_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP()")) @db.Timestamp(0)
  updated_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP()")) @db.Timestamp(0)
}

enum TaskItemStatus {
  ERRORED //エラーが発生
  FINISHED //終了した
}

//タスクの一つ一つの処理 冪等性を守るためのやつ
model Task_Item {
  process_id String
  chunk_id Int //チャンクのID
  task Task @relation(fields: [process_id], references: [process_id], onDelete: Cascade)
  task_item_id Int //グループ（タスク）内で一意に発行される処理単位のID
  @@id([process_id, task_item_id])
  @@index([process_id, chunk_id, status])

  status TaskItemStatus @default(FINISHED) //ステータス
  status_description String? //ステータスの説明
  process_time Int //処理にかかった時間（ミリ秒）

  created_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP()")) @db.Timestamp(0)
  updated_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP()")) @db.Timestamp(0)
}


//取引関連の操作 ゆくゆくはログサービスやEventBridge S3に綺麗に保管したい
enum SystemLogDomain {
  TRANSACTION
}

enum SystemLogResourceKind {
  TRANSACTION
}

model System_Log {
  id Int  @db.UnsignedInt() @id @default(autoincrement()) /// @zod.number.describe("取引のID")
  domain SystemLogDomain
  resource_id Int?  @db.UnsignedInt() /// @zod.number.describe("リソースのID")
  resource_kind SystemLogResourceKind?
  @@index([resource_id, resource_kind])
  title String? /// @zod.string.describe("ログのタイトル")
  log_text String? @db.Text() /// @zod.string.describe("ログの内容")
  created_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP()")) @db.Timestamp(0)
}

//カスタムテンプレート [TODO] 別のファイルに移すかも

enum TemplateKind {
  LABEL_PRINTER
  PURCHASE_TABLE
}

model Template {
  id Int  @db.UnsignedInt() @id @default(autoincrement()) /// @zod.number.describe("ラベルプリンターのカスタムテンプレートのID")
  store_id          Int  @db.UnsignedInt()
  store             Store     @relation(fields: [store_id], references: [id], onDelete: Cascade)
  kind TemplateKind
  display_name String
  url String? @db.VarChar(200) //カスタムテンプレートのURL

  created_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP()")) @db.Timestamp(0)
}

//お知らせ
enum AnnouncementKind {
  BUG //不具合
  UPDATE //アップデート
  OTHER //その他
}

enum AnnouncementStatus {
  UNPUBLISHED //非公開
  PUBLISHED //公開済み
  DELETED //削除済み
}

model Announcement {
  id Int  @db.UnsignedInt() @id @default(autoincrement()) /// @zod.number.describe("お知らせのID")
  title String? /// @zod.string.describe("お知らせのタイトル")
  // content String? @db.Text() /// @zod.string.describe("お知らせの内容") 廃止済み
  url String? @db.VarChar(200) //URL
  target_day DateTime? @db.Date() //対象日
  kind AnnouncementKind //お知らせの種類
  publish_at DateTime? @db.Date() //公開日 自動で公開になる
  stores Announcement_Store[]
  status AnnouncementStatus @default(UNPUBLISHED) //ステータス
  created_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP()")) @db.Timestamp(0)
  updated_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP()")) @db.Timestamp(0)
}

//お知らせと各ストアのリレーション
model Announcement_Store {
  announcement_id Int  @db.UnsignedInt()
  announcement Announcement @relation(fields: [announcement_id], references: [id], onDelete: Cascade)
  store_id Int  @db.UnsignedInt()
  store Store @relation(fields: [store_id], references: [id], onDelete: Cascade)
  read Boolean @default(false) //既読かどうか
  created_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP()")) @db.Timestamp(0)
  @@id([announcement_id, store_id])
}

//周辺機器の管理
enum DeviceType {
  RECEIPT_PRINTER //レシートプリンター
  LABEL_PRINTER //ラベルプリンター
}

model Device {
  id Int  @db.UnsignedInt() @id @default(autoincrement()) /// @zod.number.describe("周辺機器のID これを使ってリクエストを送る")
  store_id Int  @db.UnsignedInt()
  store Store @relation(fields: [store_id], references: [id], onDelete: Cascade)

  type DeviceType

  //一旦ストアごとに1デバイスしか作れないようにする
  @@unique([store_id, type])

  //必要に応じてトークン管理するかも

  last_used_at DateTime? @db.Timestamp(0) //最終使用時間
  created_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP()")) @db.Timestamp(0)
  updated_at DateTime @default(dbgenerated("CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP()")) @db.Timestamp(0)
}